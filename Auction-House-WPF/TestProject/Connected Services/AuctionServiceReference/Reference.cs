//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestProject.AuctionServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuctionServiceReference.IAuctionService")]
    public interface IAuctionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetActiveAuctionsByUsername", ReplyAction="http://tempuri.org/IAuctionService/GetActiveAuctionsByUsernameResponse")]
        ServiceLayer.AuctionServiceReference.AuctionData GetActiveAuctionsByUsername(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetActiveAuctionsByUsername", ReplyAction="http://tempuri.org/IAuctionService/GetActiveAuctionsByUsernameResponse")]
        System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData> GetActiveAuctionsByUsernameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetDoneAuctionsByUsername", ReplyAction="http://tempuri.org/IAuctionService/GetDoneAuctionsByUsernameResponse")]
        ServiceLayer.AuctionServiceReference.AuctionData GetDoneAuctionsByUsername(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetDoneAuctionsByUsername", ReplyAction="http://tempuri.org/IAuctionService/GetDoneAuctionsByUsernameResponse")]
        System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData> GetDoneAuctionsByUsernameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/InsertAuction", ReplyAction="http://tempuri.org/IAuctionService/InsertAuctionResponse")]
        int InsertAuction(ServiceLayer.AuctionServiceReference.AuctionData aData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/InsertAuction", ReplyAction="http://tempuri.org/IAuctionService/InsertAuctionResponse")]
        System.Threading.Tasks.Task<int> InsertAuctionAsync(ServiceLayer.AuctionServiceReference.AuctionData aData);
        
        // CODEGEN: Generating message contract since the operation InsertPicture is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/InsertPicture", ReplyAction="http://tempuri.org/IAuctionService/InsertPictureResponse")]
        TestProject.AuctionServiceReference.InsertPictureResponse InsertPicture(TestProject.AuctionServiceReference.ImageData request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/InsertPicture", ReplyAction="http://tempuri.org/IAuctionService/InsertPictureResponse")]
        System.Threading.Tasks.Task<TestProject.AuctionServiceReference.InsertPictureResponse> InsertPictureAsync(TestProject.AuctionServiceReference.ImageData request);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (GetPicture)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetPicture", ReplyAction="http://tempuri.org/IAuctionService/GetPictureResponse")]
        TestProject.AuctionServiceReference.RemoteFileInfo GetPicture(TestProject.AuctionServiceReference.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetPicture", ReplyAction="http://tempuri.org/IAuctionService/GetPictureResponse")]
        System.Threading.Tasks.Task<TestProject.AuctionServiceReference.RemoteFileInfo> GetPictureAsync(TestProject.AuctionServiceReference.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/InsertPictures", ReplyAction="http://tempuri.org/IAuctionService/InsertPicturesResponse")]
        bool InsertPictures(ServiceLayer.AuctionServiceReference.ImageData[] images);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/InsertPictures", ReplyAction="http://tempuri.org/IAuctionService/InsertPicturesResponse")]
        System.Threading.Tasks.Task<bool> InsertPicturesAsync(ServiceLayer.AuctionServiceReference.ImageData[] images);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetAuctionsResponse")]
        ServiceLayer.AuctionServiceReference.AuctionData[] GetAuctions(string auctionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetAuctionsResponse")]
        System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData[]> GetAuctionsAsync(string auctionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetUserAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetUserAuctionsResponse")]
        ServiceLayer.AuctionServiceReference.AuctionData[] GetUserAuctions(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetUserAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetUserAuctionsResponse")]
        System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData[]> GetUserAuctionsAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAuction", ReplyAction="http://tempuri.org/IAuctionService/GetAuctionResponse")]
        ServiceLayer.AuctionServiceReference.AuctionData GetAuction(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAuction", ReplyAction="http://tempuri.org/IAuctionService/GetAuctionResponse")]
        System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData> GetAuctionAsync(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetCategories", ReplyAction="http://tempuri.org/IAuctionService/GetCategoriesResponse")]
        string[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetCategories", ReplyAction="http://tempuri.org/IAuctionService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<string[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetImages", ReplyAction="http://tempuri.org/IAuctionService/GetImagesResponse")]
        ServiceLayer.AuctionServiceReference.ImageInfoData[] GetImages(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetImages", ReplyAction="http://tempuri.org/IAuctionService/GetImagesResponse")]
        System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.ImageInfoData[]> GetImagesAsync(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetLatestAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetLatestAuctionsResponse")]
        ServiceLayer.AuctionServiceReference.AuctionData[] GetLatestAuctions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetLatestAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetLatestAuctionsResponse")]
        System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData[]> GetLatestAuctionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetBids", ReplyAction="http://tempuri.org/IAuctionService/GetBidsResponse")]
        ServiceLayer.AuctionServiceReference.BidData[] GetBids(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetBids", ReplyAction="http://tempuri.org/IAuctionService/GetBidsResponse")]
        System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.BidData[]> GetBidsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/InsertBid", ReplyAction="http://tempuri.org/IAuctionService/InsertBidResponse")]
        bool InsertBid(ServiceLayer.AuctionServiceReference.BidData bidData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/InsertBid", ReplyAction="http://tempuri.org/IAuctionService/InsertBidResponse")]
        System.Threading.Tasks.Task<bool> InsertBidAsync(ServiceLayer.AuctionServiceReference.BidData bidData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetMaxBidOnAuction", ReplyAction="http://tempuri.org/IAuctionService/GetMaxBidOnAuctionResponse")]
        double GetMaxBidOnAuction(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetMaxBidOnAuction", ReplyAction="http://tempuri.org/IAuctionService/GetMaxBidOnAuctionResponse")]
        System.Threading.Tasks.Task<double> GetMaxBidOnAuctionAsync(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/DeleteAuctionById", ReplyAction="http://tempuri.org/IAuctionService/DeleteAuctionByIdResponse")]
        bool DeleteAuctionById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/DeleteAuctionById", ReplyAction="http://tempuri.org/IAuctionService/DeleteAuctionByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteAuctionByIdAsync(int id);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ImageData", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ImageData {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int AuctionId;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public System.DateTime DateAdded;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Description;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string ImgUrl;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int UserId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileStream;
        
        public ImageData() {
        }
        
        public ImageData(int AuctionId, System.DateTime DateAdded, string Description, string FileName, string ImgUrl, int UserId, System.IO.Stream FileStream) {
            this.AuctionId = AuctionId;
            this.DateAdded = DateAdded;
            this.Description = Description;
            this.FileName = FileName;
            this.ImgUrl = ImgUrl;
            this.UserId = UserId;
            this.FileStream = FileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class InsertPictureResponse {
        
        public InsertPictureResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int AuctionNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int UserId;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(int AuctionNumber, string FileName, int UserId) {
            this.AuctionNumber = AuctionNumber;
            this.FileName = FileName;
            this.UserId = UserId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, long Length, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuctionServiceChannel : TestProject.AuctionServiceReference.IAuctionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuctionServiceClient : System.ServiceModel.ClientBase<TestProject.AuctionServiceReference.IAuctionService>, TestProject.AuctionServiceReference.IAuctionService {
        
        public AuctionServiceClient() {
        }
        
        public AuctionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuctionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceLayer.AuctionServiceReference.AuctionData GetActiveAuctionsByUsername(string userName) {
            return base.Channel.GetActiveAuctionsByUsername(userName);
        }
        
        public System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData> GetActiveAuctionsByUsernameAsync(string userName) {
            return base.Channel.GetActiveAuctionsByUsernameAsync(userName);
        }
        
        public ServiceLayer.AuctionServiceReference.AuctionData GetDoneAuctionsByUsername(string userName) {
            return base.Channel.GetDoneAuctionsByUsername(userName);
        }
        
        public System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData> GetDoneAuctionsByUsernameAsync(string userName) {
            return base.Channel.GetDoneAuctionsByUsernameAsync(userName);
        }
        
        public int InsertAuction(ServiceLayer.AuctionServiceReference.AuctionData aData) {
            return base.Channel.InsertAuction(aData);
        }
        
        public System.Threading.Tasks.Task<int> InsertAuctionAsync(ServiceLayer.AuctionServiceReference.AuctionData aData) {
            return base.Channel.InsertAuctionAsync(aData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestProject.AuctionServiceReference.InsertPictureResponse TestProject.AuctionServiceReference.IAuctionService.InsertPicture(TestProject.AuctionServiceReference.ImageData request) {
            return base.Channel.InsertPicture(request);
        }
        
        public void InsertPicture(int AuctionId, System.DateTime DateAdded, string Description, string FileName, string ImgUrl, int UserId, System.IO.Stream FileStream) {
            TestProject.AuctionServiceReference.ImageData inValue = new TestProject.AuctionServiceReference.ImageData();
            inValue.AuctionId = AuctionId;
            inValue.DateAdded = DateAdded;
            inValue.Description = Description;
            inValue.FileName = FileName;
            inValue.ImgUrl = ImgUrl;
            inValue.UserId = UserId;
            inValue.FileStream = FileStream;
            TestProject.AuctionServiceReference.InsertPictureResponse retVal = ((TestProject.AuctionServiceReference.IAuctionService)(this)).InsertPicture(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestProject.AuctionServiceReference.InsertPictureResponse> TestProject.AuctionServiceReference.IAuctionService.InsertPictureAsync(TestProject.AuctionServiceReference.ImageData request) {
            return base.Channel.InsertPictureAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestProject.AuctionServiceReference.InsertPictureResponse> InsertPictureAsync(int AuctionId, System.DateTime DateAdded, string Description, string FileName, string ImgUrl, int UserId, System.IO.Stream FileStream) {
            TestProject.AuctionServiceReference.ImageData inValue = new TestProject.AuctionServiceReference.ImageData();
            inValue.AuctionId = AuctionId;
            inValue.DateAdded = DateAdded;
            inValue.Description = Description;
            inValue.FileName = FileName;
            inValue.ImgUrl = ImgUrl;
            inValue.UserId = UserId;
            inValue.FileStream = FileStream;
            return ((TestProject.AuctionServiceReference.IAuctionService)(this)).InsertPictureAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestProject.AuctionServiceReference.RemoteFileInfo TestProject.AuctionServiceReference.IAuctionService.GetPicture(TestProject.AuctionServiceReference.DownloadRequest request) {
            return base.Channel.GetPicture(request);
        }
        
        public long GetPicture(int AuctionNumber, ref string FileName, int UserId, out System.IO.Stream FileByteStream) {
            TestProject.AuctionServiceReference.DownloadRequest inValue = new TestProject.AuctionServiceReference.DownloadRequest();
            inValue.AuctionNumber = AuctionNumber;
            inValue.FileName = FileName;
            inValue.UserId = UserId;
            TestProject.AuctionServiceReference.RemoteFileInfo retVal = ((TestProject.AuctionServiceReference.IAuctionService)(this)).GetPicture(inValue);
            FileName = retVal.FileName;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestProject.AuctionServiceReference.RemoteFileInfo> TestProject.AuctionServiceReference.IAuctionService.GetPictureAsync(TestProject.AuctionServiceReference.DownloadRequest request) {
            return base.Channel.GetPictureAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestProject.AuctionServiceReference.RemoteFileInfo> GetPictureAsync(int AuctionNumber, string FileName, int UserId) {
            TestProject.AuctionServiceReference.DownloadRequest inValue = new TestProject.AuctionServiceReference.DownloadRequest();
            inValue.AuctionNumber = AuctionNumber;
            inValue.FileName = FileName;
            inValue.UserId = UserId;
            return ((TestProject.AuctionServiceReference.IAuctionService)(this)).GetPictureAsync(inValue);
        }
        
        public bool InsertPictures(ServiceLayer.AuctionServiceReference.ImageData[] images) {
            return base.Channel.InsertPictures(images);
        }
        
        public System.Threading.Tasks.Task<bool> InsertPicturesAsync(ServiceLayer.AuctionServiceReference.ImageData[] images) {
            return base.Channel.InsertPicturesAsync(images);
        }
        
        public ServiceLayer.AuctionServiceReference.AuctionData[] GetAuctions(string auctionName) {
            return base.Channel.GetAuctions(auctionName);
        }
        
        public System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData[]> GetAuctionsAsync(string auctionName) {
            return base.Channel.GetAuctionsAsync(auctionName);
        }
        
        public ServiceLayer.AuctionServiceReference.AuctionData[] GetUserAuctions(string userName) {
            return base.Channel.GetUserAuctions(userName);
        }
        
        public System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData[]> GetUserAuctionsAsync(string userName) {
            return base.Channel.GetUserAuctionsAsync(userName);
        }
        
        public ServiceLayer.AuctionServiceReference.AuctionData GetAuction(int auctionId) {
            return base.Channel.GetAuction(auctionId);
        }
        
        public System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData> GetAuctionAsync(int auctionId) {
            return base.Channel.GetAuctionAsync(auctionId);
        }
        
        public string[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public ServiceLayer.AuctionServiceReference.ImageInfoData[] GetImages(int auctionId) {
            return base.Channel.GetImages(auctionId);
        }
        
        public System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.ImageInfoData[]> GetImagesAsync(int auctionId) {
            return base.Channel.GetImagesAsync(auctionId);
        }
        
        public ServiceLayer.AuctionServiceReference.AuctionData[] GetLatestAuctions() {
            return base.Channel.GetLatestAuctions();
        }
        
        public System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.AuctionData[]> GetLatestAuctionsAsync() {
            return base.Channel.GetLatestAuctionsAsync();
        }
        
        public ServiceLayer.AuctionServiceReference.BidData[] GetBids(int id) {
            return base.Channel.GetBids(id);
        }
        
        public System.Threading.Tasks.Task<ServiceLayer.AuctionServiceReference.BidData[]> GetBidsAsync(int id) {
            return base.Channel.GetBidsAsync(id);
        }
        
        public bool InsertBid(ServiceLayer.AuctionServiceReference.BidData bidData) {
            return base.Channel.InsertBid(bidData);
        }
        
        public System.Threading.Tasks.Task<bool> InsertBidAsync(ServiceLayer.AuctionServiceReference.BidData bidData) {
            return base.Channel.InsertBidAsync(bidData);
        }
        
        public double GetMaxBidOnAuction(int auctionId) {
            return base.Channel.GetMaxBidOnAuction(auctionId);
        }
        
        public System.Threading.Tasks.Task<double> GetMaxBidOnAuctionAsync(int auctionId) {
            return base.Channel.GetMaxBidOnAuctionAsync(auctionId);
        }
        
        public bool DeleteAuctionById(int id) {
            return base.Channel.DeleteAuctionById(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAuctionByIdAsync(int id) {
            return base.Channel.DeleteAuctionByIdAsync(id);
        }
    }
}
