using Auction_House_WCF.DataAccess.Interfaces;
using Auction_House_WCF.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Configuration;
using System.Data.SqlClient;
using System.Transactions;


namespace Auction_House_WCF.DataAccess
{
    public class DBUser : IUserCRUD<UserData>
    {
        private string _connectionString;

        public DBUser()
        {
            try
            {
                _connectionString = ConfigurationManager.ConnectionStrings["KrakaDB"].ConnectionString;
            }
            catch(Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Creates a user in the database.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns>Returns the user's autogenerated id. Returns -1 if something went wrong. </returns>
        public int Create(UserData entity) // Explicit transaction?
        {
            //Set return value
            entity.Id = -1;

            //Set isolation level
            var options = new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted
            };

            //SQL statements
            string insertPersonQuery = "INSERT INTO Person (UserName,Email,Phone) VALUES (@userName, @email, @phone);  SELECT SCOPE_IDENTITY()";
            string insertPasswordQuery = "INSERT INTO Password (Person_Id, Hash, Salt) VALUES (@id, @hash, @salt)";
            string getRegionQuery = "SELECT * FROM Region WHERE ZipCode = @zipCode";
            string insertRegionQuery = "INSERT INTO Region (ZipCode, Region) VALUES (@zipCode, @region)";
            string insertUserQuery = "INSERT INTO Users (User_Id,ZipCode) VALUES (@id, @zipCode)";


            using (var scope = new TransactionScope(TransactionScopeOption.Required, options))
            {
                using (var conn = new SqlConnection(_connectionString))
                {
                    try
                    {
                        //Open connection to database.
                        conn.Open();

                        // Do first transaction - insert person.
                        using (var cmdIPerson = new SqlCommand(insertPersonQuery, conn)) 
                        {
                            cmdIPerson.Parameters.AddWithValue("userName", entity.UserName);
                            cmdIPerson.Parameters.AddWithValue("email", entity.Email);
                            cmdIPerson.Parameters.AddWithValue("phone", entity.Phone);
                            entity.Id = (int)Convert.ToInt32(cmdIPerson.ExecuteScalar()); // Return auto generated id from SQL Server.
                        } 

                        using (var cmdIPassword = new SqlCommand(insertPasswordQuery, conn))
                        {
                            cmdIPassword.Parameters.AddWithValue("id", entity.Id);
                            cmdIPassword.Parameters.AddWithValue("hash", entity.PasswordHash);
                            cmdIPassword.Parameters.AddWithValue("salt", entity.Salt);
                            cmdIPassword.ExecuteNonQuery();
                        }

                        bool zipFound = false;
                        using (var cmdGRegion = new SqlCommand(getRegionQuery, conn))
                        {
                            cmdGRegion.Parameters.AddWithValue("zipCode", entity.ZipCode);
                            //Read the incoming stream of rows.
                            SqlDataReader reader = cmdGRegion.ExecuteReader();
                            if (reader.HasRows)
                            {
                                zipFound = true;
                            }
                            reader.Close();
                        }

                        // If ZipCode is not found in database.
                        if (!zipFound)
                        {
                            using (var cmdIRegion = new SqlCommand(insertRegionQuery, conn))
                            {
                                cmdIRegion.Parameters.AddWithValue("zipCode", entity.ZipCode);
                                cmdIRegion.Parameters.AddWithValue("region", entity.Region);
                                cmdIRegion.ExecuteNonQuery();
                            }
                        }

                        using (var cmdIUser = new SqlCommand(insertUserQuery, conn))
                        {
                            cmdIUser.Parameters.AddWithValue("id", entity.Id);
                            cmdIUser.Parameters.AddWithValue("zipCode", entity.ZipCode);
                            cmdIUser.ExecuteNonQuery();
                        }

                        //If everything went well, will commit.
                        scope.Complete();
                    }
                    catch (TransactionAbortedException e)
                    {
                        throw e;
                    }
                    finally
                    {
                        scope.Dispose();
                    }
                }
            }
            return entity.Id;
        }

        private int Create3(UserData entity)
        {
            string insertPersonQuery = "INSERT INTO Person (UserName,Email,Phone) VALUES (@userName, @email, @phone); SELECT SCOPE_IDENTITY()";
            entity.Id = -1;
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                SqlTransaction transaction = null;

                try
                {
                    connection.Open();
                    transaction = connection.BeginTransaction();
                    using (SqlCommand cmdIPerson = new SqlCommand(insertPersonQuery, connection, transaction)) { 
                        cmdIPerson.Parameters.AddWithValue("userName", entity.UserName);
                        cmdIPerson.Parameters.AddWithValue("email", entity.Email);
                        cmdIPerson.Parameters.AddWithValue("phone", entity.Phone);
                        entity.Id = Convert.ToInt32(cmdIPerson.ExecuteScalar()); } // Return auto generated id from SQL Server. }
                    connection.Close();
                }
                catch ( Exception e)
                {

                }

            }
            return entity.Id;
        }

            private int Create2(UserData entity)
        {
            entity.Id = -1;

            var transaction = new CommittableTransaction( new TransactionOptions 
            {
                IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead
            });

            string insertPersonQuery = "INSERT INTO Person (UserName,Email,Phone) VALUES (@userName, @email, @phone); SELECT SCOPE_IDENTITY()";
            string insertPasswordQuery = "INSERT INTO Password (Person_Id, Hash, Salt) VALUES (@id, @hash, @salt)";
            string insertRegionQuery = "INSERT INTO Region (ZipCode, Region) VALUES (@zipCode, @region)";
            string getRegionQuery = "SELECT * FROM Region WHERE ZipCode = @zipCode";
            string insertUserQuery = "INSERT INTO Users (User_Id,ZipCode) VALUES (@id, @zipCode)";

                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    try
                    {
                        connection.Open();
                        connection.EnlistTransaction(transaction);

                        using (var cmdIPerson = new SqlCommand(insertPersonQuery, connection))
                        {
                            cmdIPerson.Parameters.AddWithValue("userName", entity.UserName);
                            cmdIPerson.Parameters.AddWithValue("email", entity.Email);
                            cmdIPerson.Parameters.AddWithValue("phone", entity.Phone);
                            cmdIPerson.ExecuteNonQuery(); // Return auto generated id from SQL Server.
                        }

                        using (var cmdIPassword = new SqlCommand(insertPasswordQuery, connection))
                        {
                            cmdIPassword.Parameters.AddWithValue("id", entity.Id);
                            cmdIPassword.Parameters.AddWithValue("hash", entity.PasswordHash);
                            cmdIPassword.Parameters.AddWithValue("salt", entity.Salt);
                            cmdIPassword.ExecuteNonQuery();
                        }

                    transaction.Commit();
                    }
                    catch (Exception e)
                    {
                    transaction.Rollback();
                }
            }
            return entity.Id;
        }

        private int Create4(UserData entity)
        {
            int idReturn = -1;
            SqlTransaction sqlTran = null;

            string insertPersonQuery = "INSERT INTO Person (UserName,Email,Phone) VALUES (@userName, @email, @phone); SELECT SCOPE_IDENTITY()";
            string insertPasswordQuery = "INSERT INTO Password (Person_Id, Hash, Salt) VALUES (@id, @hash, @salt)";
            string insertRegionQuery = "INSERT INTO Region (ZipCode, Region) VALUES (@zipCode, @region)";
            string getRegionQuery = "SELECT * FROM Region WHERE ZipCode = @zipCode";
            string insertUserQuery = "INSERT INTO Users (User_Id,ZipCode) VALUES (@id, @zipCode)";

            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();

                //Add variables to prepared statements.
                SqlCommand cmdIPerson = new SqlCommand(insertPersonQuery, connection);
                cmdIPerson.Parameters.AddWithValue("userName", entity.UserName);
                cmdIPerson.Parameters.AddWithValue("email", entity.Email);
                cmdIPerson.Parameters.AddWithValue("phone", entity.Phone);

                SqlCommand cmdIPassword = new SqlCommand(insertPasswordQuery, connection);
                cmdIPassword.Parameters.AddWithValue("id", entity.Id);
                cmdIPassword.Parameters.AddWithValue("hash", entity.PasswordHash);
                cmdIPassword.Parameters.AddWithValue("salt", entity.Salt);

                SqlCommand cmdIUser = new SqlCommand(insertUserQuery, connection);
                cmdIUser.Parameters.AddWithValue("id", entity.Id);
                cmdIUser.Parameters.AddWithValue("zipCode", entity.ZipCode);

                SqlCommand cmdIRegion = new SqlCommand(insertRegionQuery, connection);
                cmdIRegion.Parameters.AddWithValue("zipCode", entity.ZipCode);
                cmdIRegion.Parameters.AddWithValue("region", entity.Region);

                SqlCommand cmdGRegion = new SqlCommand(getRegionQuery, connection);
                cmdIRegion.Parameters.AddWithValue("zipCode", entity.ZipCode);

                //Start transaction
                sqlTran = connection.BeginTransaction("Insert_User");

                //Add transaction to commands.
                cmdIPerson.Transaction = sqlTran;
                cmdIPassword.Transaction = sqlTran;
                cmdIUser.Transaction = sqlTran;
                cmdIRegion.Transaction = sqlTran;
                cmdGRegion.Transaction = sqlTran;
                try
                {
                    // Execute commands
                    entity.Id = Convert.ToInt32(cmdIPerson.ExecuteScalar()); // Return auto generated id from SQL Server.
                    cmdIPassword.ExecuteNonQuery();
                    SqlDataReader reader = cmdGRegion.ExecuteReader();
                    if (!reader.HasRows)
                    {
                        cmdIRegion.ExecuteNonQuery();
                    }
                    reader.Close();
                    cmdIUser.ExecuteNonQuery();

                    // Commit transaction and set return value.
                    idReturn = entity.Id;
                    sqlTran.Commit();
                }
                catch(Exception)
                {
                    try
                    {
                        sqlTran.Rollback();
                    }
                    catch (SqlException)
                    {
                        
                    }
                }
                finally
                {
                    connection.Close();
                }
            }
            return idReturn;
        }

        public UserData Get(int id)
        {
            UserData user = new UserData();
            string queryString = 
                "SELECT P.Id, P.UserName, P.Email, P.Phone, Users.ZipCode, Region.Region " +
                "FROM Person AS P " +
                "INNER JOIN Users ON P.Id=Users.User_Id " +
                "INNER JOIN Password ON P.Id=Password.Person_Id " +
                "INNER JOIN Region ON Users.ZipCode=Region.ZipCode " +
                "WHERE P.Id = @Id";
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                SqlCommand cmdGetUser = new SqlCommand(queryString, connection);
                cmdGetUser.Parameters.AddWithValue("@Id", id);

                    connection.Open();
                    SqlDataReader reader = cmdGetUser.ExecuteReader();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            user = ToObject(reader.GetInt32(0),reader.GetString(1),reader.GetString(2),
                            reader.GetString(3), reader.GetString(4));
                        }
                    }
                //Close reader
                reader.Close();
                //Close connection
                connection.Close();
            }
            return user;
        }

        public UserData GetByUserName(string userName)
        {
            UserData user = new UserData();
            string queryString =
                "SELECT P.Id, P.UserName, P.Email, P.Phone, Users.ZipCode, Region.Region, Password.Salt, Password.Hash " +
                "FROM Person AS P " +
                "INNER JOIN Users ON P.Id=Users.User_Id " +
                "INNER JOIN Password ON P.Id=Password.Person_Id " +
                "INNER JOIN Region ON Users.ZipCode=Region.ZipCode " +
                "WHERE P.UserName = @UserName";
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                SqlCommand cmdGetUser = new SqlCommand(queryString, connection);
                cmdGetUser.Parameters.AddWithValue("@UserName", userName);

                connection.Open();
                SqlDataReader reader = cmdGetUser.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        user = new UserData
                        {
                            Id = reader.GetInt32(0),
                            UserName = reader.GetString(1),
                            Email = reader.GetString(2),
                            Phone = reader.GetString(3),
                            ZipCode = reader.GetString(4),
                            Region = reader.GetString(5),
                            Salt = reader.GetString(6),
                            PasswordHash = reader.GetString(7)
                        };
                    }
                }
                //Close reader
                reader.Close();
                //Close connection
                connection.Close();
            }
            return user;
        }

        public bool CheckUserName(string userName)
        {
            bool found = false;
            string queryString =
                "SELECT P.Id " +
                "FROM Person AS P " +
                "WHERE P.UserName = @UserName";


            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                SqlCommand cmdGetUser = new SqlCommand(queryString, connection);
                cmdGetUser.Parameters.AddWithValue("@UserName", userName);

                connection.Open();
                SqlDataReader reader = cmdGetUser.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        int userId = reader.GetInt32(0);
                        if (userId > 0)
                        {
                            found = true;
                        }
                    }
                }
                //Close reader
                reader.Close();
                //Close connection
                connection.Close();
            }
            return found;
        }

        public Boolean testConnection(int id)
        {
            Boolean hasConnection = false;
            string queryString = "SELECT * FROM Person WHERE Id = @Id;";
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                SqlCommand cmdGetUser = new SqlCommand(queryString, connection);
                cmdGetUser.Parameters.AddWithValue("@Id", id);

                connection.Open();
                SqlDataReader reader = cmdGetUser.ExecuteReader();
                if (reader.HasRows)
                {
                    hasConnection = true;
                }
                //Close reader
                reader.Close();
                //Close connection
                connection.Close();
            }
            return hasConnection;
        }

        private UserData ToObject(int id, string userName, string email, string phone, string zipCode)
        {
            UserData user = new UserData
            {
                Id = id,
                UserName = userName,
                Email = email,
                Phone = phone,
                ZipCode = zipCode
            };
            return user;
        }

        private IEnumerable<UserData> ToObjects()
        {
            throw new NotImplementedException();
        }
    }
}
